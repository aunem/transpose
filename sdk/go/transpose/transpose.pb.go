// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/transpose.proto

/*
Package transpose is a generated protocol buffer package.

It is generated from these files:
	api/transpose.proto

It has these top-level messages:
	Config
	Listener
	Stats
	Empty
*/
package transpose

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/any"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Config struct {
	Debug    bool      `protobuf:"varint,1,opt,name=debug" json:"debug,omitempty"`
	Listener *Listener `protobuf:"bytes,2,opt,name=listener" json:"listener,omitempty"`
}

func (m *Config) Reset()                    { *m = Config{} }
func (m *Config) String() string            { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()               {}
func (*Config) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Config) GetDebug() bool {
	if m != nil {
		return m.Debug
	}
	return false
}

func (m *Config) GetListener() *Listener {
	if m != nil {
		return m.Listener
	}
	return nil
}

type Listener struct {
	Name    string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Package string                `protobuf:"bytes,2,opt,name=package" json:"package,omitempty"`
	Spec    *google_protobuf1.Any `protobuf:"bytes,3,opt,name=spec" json:"spec,omitempty"`
}

func (m *Listener) Reset()                    { *m = Listener{} }
func (m *Listener) String() string            { return proto.CompactTextString(m) }
func (*Listener) ProtoMessage()               {}
func (*Listener) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Listener) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Listener) GetPackage() string {
	if m != nil {
		return m.Package
	}
	return ""
}

func (m *Listener) GetSpec() *google_protobuf1.Any {
	if m != nil {
		return m.Spec
	}
	return nil
}

type Stats struct {
	Body []byte `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *Stats) Reset()                    { *m = Stats{} }
func (m *Stats) String() string            { return proto.CompactTextString(m) }
func (*Stats) ProtoMessage()               {}
func (*Stats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Stats) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*Config)(nil), "transpose.Config")
	proto.RegisterType((*Listener)(nil), "transpose.Listener")
	proto.RegisterType((*Stats)(nil), "transpose.Stats")
	proto.RegisterType((*Empty)(nil), "transpose.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Transpose service

type TransposeClient interface {
	GetConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Config, error)
	PutConfig(ctx context.Context, in *Config, opts ...grpc.CallOption) (*Config, error)
	GetStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Stats, error)
}

type transposeClient struct {
	cc *grpc.ClientConn
}

func NewTransposeClient(cc *grpc.ClientConn) TransposeClient {
	return &transposeClient{cc}
}

func (c *transposeClient) GetConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Config, error) {
	out := new(Config)
	err := grpc.Invoke(ctx, "/transpose.Transpose/GetConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transposeClient) PutConfig(ctx context.Context, in *Config, opts ...grpc.CallOption) (*Config, error) {
	out := new(Config)
	err := grpc.Invoke(ctx, "/transpose.Transpose/PutConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transposeClient) GetStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Stats, error) {
	out := new(Stats)
	err := grpc.Invoke(ctx, "/transpose.Transpose/GetStats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Transpose service

type TransposeServer interface {
	GetConfig(context.Context, *Empty) (*Config, error)
	PutConfig(context.Context, *Config) (*Config, error)
	GetStats(context.Context, *Empty) (*Stats, error)
}

func RegisterTransposeServer(s *grpc.Server, srv TransposeServer) {
	s.RegisterService(&_Transpose_serviceDesc, srv)
}

func _Transpose_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransposeServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transpose.Transpose/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransposeServer).GetConfig(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transpose_PutConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Config)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransposeServer).PutConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transpose.Transpose/PutConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransposeServer).PutConfig(ctx, req.(*Config))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transpose_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransposeServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transpose.Transpose/GetStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransposeServer).GetStats(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Transpose_serviceDesc = grpc.ServiceDesc{
	ServiceName: "transpose.Transpose",
	HandlerType: (*TransposeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfig",
			Handler:    _Transpose_GetConfig_Handler,
		},
		{
			MethodName: "PutConfig",
			Handler:    _Transpose_PutConfig_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _Transpose_GetStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/transpose.proto",
}

func init() { proto.RegisterFile("api/transpose.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 354 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x52, 0xbd, 0x4e, 0xf3, 0x30,
	0x14, 0x55, 0xfa, 0xf5, 0x27, 0xb9, 0x5f, 0xc5, 0x8f, 0xdb, 0x21, 0x04, 0x86, 0x2a, 0x53, 0x01,
	0x29, 0x96, 0xca, 0xc6, 0x80, 0x54, 0x50, 0xd5, 0x05, 0x09, 0x14, 0x98, 0xd8, 0xec, 0xd4, 0x35,
	0x51, 0x5b, 0xdb, 0x8a, 0x9d, 0x21, 0x2b, 0xaf, 0xc0, 0xa3, 0x21, 0xde, 0x80, 0x07, 0x41, 0xb5,
	0x9b, 0xb6, 0x52, 0xd9, 0xee, 0x39, 0xf7, 0xdc, 0x73, 0xcf, 0xb5, 0x0c, 0x3d, 0xa2, 0x72, 0x6c,
	0x0a, 0x22, 0xb4, 0x92, 0x9a, 0x25, 0xaa, 0x90, 0x46, 0xa2, 0x60, 0x4b, 0x44, 0x17, 0x5c, 0x4a,
	0xbe, 0x64, 0x78, 0x2d, 0x23, 0x42, 0x48, 0x43, 0x4c, 0x2e, 0x85, 0x76, 0xc2, 0xe8, 0x6c, 0xd3,
	0xb5, 0x88, 0x96, 0x73, 0x4c, 0x44, 0xe5, 0x5a, 0xf1, 0x13, 0xb4, 0x1f, 0xa4, 0x98, 0xe7, 0x1c,
	0xf5, 0xa1, 0x35, 0x63, 0xb4, 0xe4, 0xa1, 0x37, 0xf0, 0x86, 0x7e, 0xea, 0x00, 0xc2, 0xe0, 0x2f,
	0x73, 0x6d, 0x98, 0x60, 0x45, 0xd8, 0x18, 0x78, 0xc3, 0xff, 0xa3, 0x5e, 0xb2, 0xcb, 0xf1, 0xb8,
	0x69, 0xa5, 0x5b, 0x51, 0x4c, 0xc1, 0xaf, 0x59, 0x84, 0xa0, 0x29, 0xc8, 0x8a, 0x59, 0xc7, 0x20,
	0xb5, 0x35, 0x0a, 0xa1, 0xa3, 0x48, 0xb6, 0x20, 0x9c, 0x59, 0xbf, 0x20, 0xad, 0x21, 0x1a, 0x42,
	0x53, 0x2b, 0x96, 0x85, 0xff, 0xec, 0x9a, 0x7e, 0xe2, 0x42, 0x27, 0x75, 0xe8, 0x64, 0x2c, 0xaa,
	0xd4, 0x2a, 0xe2, 0x73, 0x68, 0xbd, 0x18, 0x62, 0xf4, 0x7a, 0x01, 0x95, 0xb3, 0xca, 0x2e, 0xe8,
	0xa6, 0xb6, 0x8e, 0x3b, 0xd0, 0x9a, 0xac, 0x94, 0xa9, 0x46, 0xdf, 0x1e, 0x04, 0xaf, 0x75, 0x54,
	0x34, 0x86, 0x60, 0xca, 0xcc, 0xe6, 0xd6, 0x93, 0xbd, 0x1b, 0xac, 0x38, 0x3a, 0xdd, 0x63, 0x9c,
	0x28, 0x3e, 0xfe, 0xf8, 0xfa, 0xf9, 0x6c, 0x04, 0xa8, 0x83, 0x33, 0x37, 0x35, 0x81, 0xe0, 0xb9,
	0xac, 0x2d, 0x0e, 0x07, 0xfe, 0xf2, 0x40, 0xd6, 0xa3, 0x1b, 0xd5, 0x1e, 0xb7, 0xde, 0x15, 0xba,
	0x03, 0x7f, 0xca, 0x8c, 0x3b, 0xe0, 0x30, 0xc8, 0x3e, 0x63, 0x35, 0xf1, 0x91, 0xf5, 0xf0, 0x51,
	0x1b, 0xeb, 0x35, 0xbe, 0xbf, 0x7e, 0xbb, 0xe4, 0xb9, 0x79, 0x2f, 0x69, 0x92, 0xc9, 0x15, 0x5e,
	0x94, 0x94, 0x65, 0xb2, 0x50, 0x58, 0x66, 0x8c, 0x60, 0x3d, 0x5b, 0x60, 0x2e, 0x77, 0x3f, 0x85,
	0xb6, 0xed, 0xf3, 0xdd, 0xfc, 0x06, 0x00, 0x00, 0xff, 0xff, 0xd2, 0x16, 0x48, 0xae, 0x41, 0x02,
	0x00, 0x00,
}
